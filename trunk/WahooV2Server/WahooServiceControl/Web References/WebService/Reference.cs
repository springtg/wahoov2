//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.3074.
// 
#pragma warning disable 1591

namespace WahooServiceControl.WebService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="http://www.dotnetslackers.com/wse/documentlibrarysample")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private AuthSoapHd authSoapHdValueField;
        
        private System.Threading.SendOrPostCallback DownloadFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDownloadFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateDirectoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckExistsDirectoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileSizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBlowfishKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadBlowfishKeyOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service() {
            this.Url = global::WahooServiceControl.Properties.Settings.Default.WahooServiceControl_WebService_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public AuthSoapHd AuthSoapHdValue {
            get {
                return this.authSoapHdValueField;
            }
            set {
                this.authSoapHdValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event DownloadFileCompletedEventHandler DownloadFileCompleted;
        
        /// <remarks/>
        public event GetDownloadFilesCompletedEventHandler GetDownloadFilesCompleted;
        
        /// <remarks/>
        public event UploadFileCompletedEventHandler UploadFileCompleted;
        
        /// <remarks/>
        public event CreateDirectoryCompletedEventHandler CreateDirectoryCompleted;
        
        /// <remarks/>
        public event CheckExistsDirectoryCompletedEventHandler CheckExistsDirectoryCompleted;
        
        /// <remarks/>
        public event GetFileSizeCompletedEventHandler GetFileSizeCompleted;
        
        /// <remarks/>
        public event GetBlowfishKeyCompletedEventHandler GetBlowfishKeyCompleted;
        
        /// <remarks/>
        public event UploadBlowfishKeyCompletedEventHandler UploadBlowfishKeyCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthSoapHdValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dotnetslackers.com/wse/documentlibrarysample/DownloadFile", RequestNamespace="http://www.dotnetslackers.com/wse/documentlibrarysample", ResponseNamespace="http://www.dotnetslackers.com/wse/documentlibrarysample", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadFile(string serverFolder, string filename, long Offset, int BufferSize, bool storeFile) {
            object[] results = this.Invoke("DownloadFile", new object[] {
                        serverFolder,
                        filename,
                        Offset,
                        BufferSize,
                        storeFile});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void DownloadFileAsync(string serverFolder, string filename, long Offset, int BufferSize, bool storeFile) {
            this.DownloadFileAsync(serverFolder, filename, Offset, BufferSize, storeFile, null);
        }
        
        /// <remarks/>
        public void DownloadFileAsync(string serverFolder, string filename, long Offset, int BufferSize, bool storeFile, object userState) {
            if ((this.DownloadFileOperationCompleted == null)) {
                this.DownloadFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadFileOperationCompleted);
            }
            this.InvokeAsync("DownloadFile", new object[] {
                        serverFolder,
                        filename,
                        Offset,
                        BufferSize,
                        storeFile}, this.DownloadFileOperationCompleted, userState);
        }
        
        private void OnDownloadFileOperationCompleted(object arg) {
            if ((this.DownloadFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadFileCompleted(this, new DownloadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthSoapHdValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dotnetslackers.com/wse/documentlibrarysample/GetDownloadFiles", RequestNamespace="http://www.dotnetslackers.com/wse/documentlibrarysample", ResponseNamespace="http://www.dotnetslackers.com/wse/documentlibrarysample", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public object[] GetDownloadFiles(string serverFolder) {
            object[] results = this.Invoke("GetDownloadFiles", new object[] {
                        serverFolder});
            return ((object[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDownloadFilesAsync(string serverFolder) {
            this.GetDownloadFilesAsync(serverFolder, null);
        }
        
        /// <remarks/>
        public void GetDownloadFilesAsync(string serverFolder, object userState) {
            if ((this.GetDownloadFilesOperationCompleted == null)) {
                this.GetDownloadFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDownloadFilesOperationCompleted);
            }
            this.InvokeAsync("GetDownloadFiles", new object[] {
                        serverFolder}, this.GetDownloadFilesOperationCompleted, userState);
        }
        
        private void OnGetDownloadFilesOperationCompleted(object arg) {
            if ((this.GetDownloadFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDownloadFilesCompleted(this, new GetDownloadFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthSoapHdValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dotnetslackers.com/wse/documentlibrarysample/UploadFile", RequestNamespace="http://www.dotnetslackers.com/wse/documentlibrarysample", ResponseNamespace="http://www.dotnetslackers.com/wse/documentlibrarysample", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UploadFile([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] buffer, long Offset, string serverFolder, string fileName, bool storeFile, bool endOfFile) {
            object[] results = this.Invoke("UploadFile", new object[] {
                        buffer,
                        Offset,
                        serverFolder,
                        fileName,
                        storeFile,
                        endOfFile});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UploadFileAsync(byte[] buffer, long Offset, string serverFolder, string fileName, bool storeFile, bool endOfFile) {
            this.UploadFileAsync(buffer, Offset, serverFolder, fileName, storeFile, endOfFile, null);
        }
        
        /// <remarks/>
        public void UploadFileAsync(byte[] buffer, long Offset, string serverFolder, string fileName, bool storeFile, bool endOfFile, object userState) {
            if ((this.UploadFileOperationCompleted == null)) {
                this.UploadFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFileOperationCompleted);
            }
            this.InvokeAsync("UploadFile", new object[] {
                        buffer,
                        Offset,
                        serverFolder,
                        fileName,
                        storeFile,
                        endOfFile}, this.UploadFileOperationCompleted, userState);
        }
        
        private void OnUploadFileOperationCompleted(object arg) {
            if ((this.UploadFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFileCompleted(this, new UploadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthSoapHdValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dotnetslackers.com/wse/documentlibrarysample/CreateDirectory", RequestNamespace="http://www.dotnetslackers.com/wse/documentlibrarysample", ResponseNamespace="http://www.dotnetslackers.com/wse/documentlibrarysample", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CreateDirectory(string path) {
            object[] results = this.Invoke("CreateDirectory", new object[] {
                        path});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CreateDirectoryAsync(string path) {
            this.CreateDirectoryAsync(path, null);
        }
        
        /// <remarks/>
        public void CreateDirectoryAsync(string path, object userState) {
            if ((this.CreateDirectoryOperationCompleted == null)) {
                this.CreateDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateDirectoryOperationCompleted);
            }
            this.InvokeAsync("CreateDirectory", new object[] {
                        path}, this.CreateDirectoryOperationCompleted, userState);
        }
        
        private void OnCreateDirectoryOperationCompleted(object arg) {
            if ((this.CreateDirectoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateDirectoryCompleted(this, new CreateDirectoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthSoapHdValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dotnetslackers.com/wse/documentlibrarysample/CheckExistsDirectory", RequestNamespace="http://www.dotnetslackers.com/wse/documentlibrarysample", ResponseNamespace="http://www.dotnetslackers.com/wse/documentlibrarysample", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckExistsDirectory(string path) {
            object[] results = this.Invoke("CheckExistsDirectory", new object[] {
                        path});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckExistsDirectoryAsync(string path) {
            this.CheckExistsDirectoryAsync(path, null);
        }
        
        /// <remarks/>
        public void CheckExistsDirectoryAsync(string path, object userState) {
            if ((this.CheckExistsDirectoryOperationCompleted == null)) {
                this.CheckExistsDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckExistsDirectoryOperationCompleted);
            }
            this.InvokeAsync("CheckExistsDirectory", new object[] {
                        path}, this.CheckExistsDirectoryOperationCompleted, userState);
        }
        
        private void OnCheckExistsDirectoryOperationCompleted(object arg) {
            if ((this.CheckExistsDirectoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckExistsDirectoryCompleted(this, new CheckExistsDirectoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthSoapHdValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dotnetslackers.com/wse/documentlibrarysample/GetFileSize", RequestNamespace="http://www.dotnetslackers.com/wse/documentlibrarysample", ResponseNamespace="http://www.dotnetslackers.com/wse/documentlibrarysample", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetFileSize(string serverFolder, string filename) {
            object[] results = this.Invoke("GetFileSize", new object[] {
                        serverFolder,
                        filename});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void GetFileSizeAsync(string serverFolder, string filename) {
            this.GetFileSizeAsync(serverFolder, filename, null);
        }
        
        /// <remarks/>
        public void GetFileSizeAsync(string serverFolder, string filename, object userState) {
            if ((this.GetFileSizeOperationCompleted == null)) {
                this.GetFileSizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileSizeOperationCompleted);
            }
            this.InvokeAsync("GetFileSize", new object[] {
                        serverFolder,
                        filename}, this.GetFileSizeOperationCompleted, userState);
        }
        
        private void OnGetFileSizeOperationCompleted(object arg) {
            if ((this.GetFileSizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileSizeCompleted(this, new GetFileSizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthSoapHdValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dotnetslackers.com/wse/documentlibrarysample/GetBlowfishKey", RequestNamespace="http://www.dotnetslackers.com/wse/documentlibrarysample", ResponseNamespace="http://www.dotnetslackers.com/wse/documentlibrarysample", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBlowfishKey() {
            object[] results = this.Invoke("GetBlowfishKey", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBlowfishKeyAsync() {
            this.GetBlowfishKeyAsync(null);
        }
        
        /// <remarks/>
        public void GetBlowfishKeyAsync(object userState) {
            if ((this.GetBlowfishKeyOperationCompleted == null)) {
                this.GetBlowfishKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBlowfishKeyOperationCompleted);
            }
            this.InvokeAsync("GetBlowfishKey", new object[0], this.GetBlowfishKeyOperationCompleted, userState);
        }
        
        private void OnGetBlowfishKeyOperationCompleted(object arg) {
            if ((this.GetBlowfishKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBlowfishKeyCompleted(this, new GetBlowfishKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthSoapHdValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dotnetslackers.com/wse/documentlibrarysample/UploadBlowfishKey", RequestNamespace="http://www.dotnetslackers.com/wse/documentlibrarysample", ResponseNamespace="http://www.dotnetslackers.com/wse/documentlibrarysample", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UploadBlowfishKey(string keyBlowfish) {
            object[] results = this.Invoke("UploadBlowfishKey", new object[] {
                        keyBlowfish});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UploadBlowfishKeyAsync(string keyBlowfish) {
            this.UploadBlowfishKeyAsync(keyBlowfish, null);
        }
        
        /// <remarks/>
        public void UploadBlowfishKeyAsync(string keyBlowfish, object userState) {
            if ((this.UploadBlowfishKeyOperationCompleted == null)) {
                this.UploadBlowfishKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadBlowfishKeyOperationCompleted);
            }
            this.InvokeAsync("UploadBlowfishKey", new object[] {
                        keyBlowfish}, this.UploadBlowfishKeyOperationCompleted, userState);
        }
        
        private void OnUploadBlowfishKeyOperationCompleted(object arg) {
            if ((this.UploadBlowfishKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadBlowfishKeyCompleted(this, new UploadBlowfishKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3074")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.dotnetslackers.com/wse/documentlibrarysample")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.dotnetslackers.com/wse/documentlibrarysample", IsNullable=false)]
    public partial class AuthSoapHd : System.Web.Services.Protocols.SoapHeader {
        
        private string strUserNameField;
        
        private string strPasswordField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public string strUserName {
            get {
                return this.strUserNameField;
            }
            set {
                this.strUserNameField = value;
            }
        }
        
        /// <remarks/>
        public string strPassword {
            get {
                return this.strPasswordField;
            }
            set {
                this.strPasswordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void DownloadFileCompletedEventHandler(object sender, DownloadFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetDownloadFilesCompletedEventHandler(object sender, GetDownloadFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDownloadFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDownloadFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UploadFileCompletedEventHandler(object sender, UploadFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void CreateDirectoryCompletedEventHandler(object sender, CreateDirectoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateDirectoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateDirectoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void CheckExistsDirectoryCompletedEventHandler(object sender, CheckExistsDirectoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckExistsDirectoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckExistsDirectoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetFileSizeCompletedEventHandler(object sender, GetFileSizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileSizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileSizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetBlowfishKeyCompletedEventHandler(object sender, GetBlowfishKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBlowfishKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBlowfishKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UploadBlowfishKeyCompletedEventHandler(object sender, UploadBlowfishKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadBlowfishKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadBlowfishKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591